{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TelSIM GUI Documentation Author: Preston Ito bash example this is a simple bash example python3 -m mkdocs serve python example this is a simple python example >>> import subsystem Imports and KPython Address These are all the imports necessary for the code. It also has KPython address and sets up EPICS channels for translation stage simulators. A good chunk of this code comes from another GUI project created by Paul Richards. His source code was used as a template for this GUI. #! @KPYTHON3@ # # kpython safely sets RELDIR, KROOT, LROOT, and PYTHONPATH before invoking # the actual Python interpreter. # Setup an EPICS address list if one is not already defined import os import subprocess import datetime import time addrs = 'localhost:5064 vm-k1epicsgateway:5064 vm-k2epicsgateway:5064 k1aoserver-new:8607 localhost:5555' print(f'Overriding EPICS address list to: {addrs}') os.environ['EPICS_CA_ADDR_LIST'] = addrs os.environ['EPICS_CA_AUTO_ADDR_LIST'] = 'NO' # Keck library includes import ktl # provided by kroot/ktl/keyword/python import kPyQt # provided by kroot/kui/kPyQt import logging, coloredlogs import argparse import sys import datetime import base64 from dateutil.parser import isoparse import requests import io from enum import Enum, auto import urllib import functools from PyQt5 import QtCore, QtWidgets, uic from PyQt5.QtWidgets import QStatusBar, QMessageBox, QWidget, QVBoxLayout, QLabel, QPushButton, \\ QToolButton, QSpacerItem, QSizePolicy, QFileDialog, QShortcut, QLCDNumber, QLayout from PyQt5.QtCore import Qt, QSize, QTimer from PyQt5.QtGui import QFont, QIcon, QPixmap, QImage, QIntValidator, QDoubleValidator, QKeySequence from PyQt5.Qt import QApplication from PToggle import PToggle, PAnimatedToggle from datetime import datetime Constants, showDialog function, and state machine class These are all of the constants used throughout the code. A showDialog function is included to be called whenever QMessageBoxes are used. The code was structured using state machines. debug = False SECONDS = 1 FONTBOLD = 'Montserrat SemiBold' FONTLIGHT = 'Montserrat Light' STATUSBAR_WHITE_STYLE = 'QStatusBar{padding-left:8px;background:white;color:black;font-weight:bold;}' STATUSBAR_YELLOW_STYLE = 'QStatusBar{padding-left:8px;background:yellow;color:black;font-weight:bold;}' EDIT_STYLE = 'font: 25 14pt \"Montserrat SemiBold\";' MODE_CLEAR_STYLE = 'background-color: rgb(255, 255, 255);' MODE_SET_STYLE = 'background-color: rgb(0, 170, 0);' MODE_UNSET_STYLE = 'background-color: rgb(170, 170, 170);' STATUS_RED_STYLE = 'background-color: rgb(255, 0, 0);' STATUS_GREEN_STYLE = 'background-color: rgb(0, 255, 0);' MESSAGE_LIMIT = 100 class TelSimStates(Enum): OFF = 0 ON = auto() IDLE = auto() MOVE_ALT = auto() AWAIT_ALT = auto() MOVE_WIND = auto() AWAIT_WIND = auto() STOPPED = auto() CLEANUP = auto() def showDialog(text, yes=False, cancel=False): ''' Show a message box to the user. :param text: The message to be displayed. :param yes: Use \"Yes/No\" instead of \"OK/Cancel\" :param cancel: Show a Cancel button, versus just OK. :return: Nothing. ''' # Create a message box msgBox = QtWidgets.QMessageBox() msgBox.setIcon(QMessageBox.Information) msgBox.setText(text) msgBox.setWindowTitle('Message') # Add buttons, either OK or OK+Cancel or Yes+No if yes: msgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No) elif cancel: msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel) else: msgBox.setStandardButtons(QMessageBox.Ok) # Test the return from the message box returnValue = msgBox.exec() if returnValue in [QMessageBox.Ok, QMessageBox.Yes]: return True else: return False","title":"Home"},{"location":"#telsim-gui-documentation","text":"","title":"TelSIM GUI Documentation"},{"location":"#author-preston-ito","text":"","title":"Author: Preston Ito"},{"location":"#bash-example","text":"this is a simple bash example python3 -m mkdocs serve","title":"bash example"},{"location":"#python-example","text":"this is a simple python example >>> import subsystem","title":"python example"},{"location":"#imports-and-kpython-address","text":"These are all the imports necessary for the code. It also has KPython address and sets up EPICS channels for translation stage simulators. A good chunk of this code comes from another GUI project created by Paul Richards. His source code was used as a template for this GUI. #! @KPYTHON3@ # # kpython safely sets RELDIR, KROOT, LROOT, and PYTHONPATH before invoking # the actual Python interpreter. # Setup an EPICS address list if one is not already defined import os import subprocess import datetime import time addrs = 'localhost:5064 vm-k1epicsgateway:5064 vm-k2epicsgateway:5064 k1aoserver-new:8607 localhost:5555' print(f'Overriding EPICS address list to: {addrs}') os.environ['EPICS_CA_ADDR_LIST'] = addrs os.environ['EPICS_CA_AUTO_ADDR_LIST'] = 'NO' # Keck library includes import ktl # provided by kroot/ktl/keyword/python import kPyQt # provided by kroot/kui/kPyQt import logging, coloredlogs import argparse import sys import datetime import base64 from dateutil.parser import isoparse import requests import io from enum import Enum, auto import urllib import functools from PyQt5 import QtCore, QtWidgets, uic from PyQt5.QtWidgets import QStatusBar, QMessageBox, QWidget, QVBoxLayout, QLabel, QPushButton, \\ QToolButton, QSpacerItem, QSizePolicy, QFileDialog, QShortcut, QLCDNumber, QLayout from PyQt5.QtCore import Qt, QSize, QTimer from PyQt5.QtGui import QFont, QIcon, QPixmap, QImage, QIntValidator, QDoubleValidator, QKeySequence from PyQt5.Qt import QApplication from PToggle import PToggle, PAnimatedToggle from datetime import datetime","title":"Imports and KPython Address"},{"location":"#constants-showdialog-function-and-state-machine-class","text":"These are all of the constants used throughout the code. A showDialog function is included to be called whenever QMessageBoxes are used. The code was structured using state machines. debug = False SECONDS = 1 FONTBOLD = 'Montserrat SemiBold' FONTLIGHT = 'Montserrat Light' STATUSBAR_WHITE_STYLE = 'QStatusBar{padding-left:8px;background:white;color:black;font-weight:bold;}' STATUSBAR_YELLOW_STYLE = 'QStatusBar{padding-left:8px;background:yellow;color:black;font-weight:bold;}' EDIT_STYLE = 'font: 25 14pt \"Montserrat SemiBold\";' MODE_CLEAR_STYLE = 'background-color: rgb(255, 255, 255);' MODE_SET_STYLE = 'background-color: rgb(0, 170, 0);' MODE_UNSET_STYLE = 'background-color: rgb(170, 170, 170);' STATUS_RED_STYLE = 'background-color: rgb(255, 0, 0);' STATUS_GREEN_STYLE = 'background-color: rgb(0, 255, 0);' MESSAGE_LIMIT = 100 class TelSimStates(Enum): OFF = 0 ON = auto() IDLE = auto() MOVE_ALT = auto() AWAIT_ALT = auto() MOVE_WIND = auto() AWAIT_WIND = auto() STOPPED = auto() CLEANUP = auto() def showDialog(text, yes=False, cancel=False): ''' Show a message box to the user. :param text: The message to be displayed. :param yes: Use \"Yes/No\" instead of \"OK/Cancel\" :param cancel: Show a Cancel button, versus just OK. :return: Nothing. ''' # Create a message box msgBox = QtWidgets.QMessageBox() msgBox.setIcon(QMessageBox.Information) msgBox.setText(text) msgBox.setWindowTitle('Message') # Add buttons, either OK or OK+Cancel or Yes+No if yes: msgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No) elif cancel: msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel) else: msgBox.setStandardButtons(QMessageBox.Ok) # Test the return from the message box returnValue = msgBox.exec() if returnValue in [QMessageBox.Ok, QMessageBox.Yes]: return True else: return False","title":"Constants, showDialog function, and state machine class"},{"location":"about/","text":"About KAPA Telescope Simulator The Keck All-sky Precision Adaptive-optics (KAPA) project will be a next-generation tomographic laser AO system, projected to begin operation at the W.M. Keck Observatory in 2024. To test their AO algorithm, Keck has built a Telescope Simulator that simulates the KAPA system on a smaller scale and more controlled environment. The KAPA Telescope Simulator is being further modified to include a turbulence simulator, which includes a glass phase screen, to simulate typical atmospheric turbulence at various altitudes and wind speeds. This simulator must move extremely precisely in two-dimensions, and will do so via two precision translation stages. GUI The turbulence simulator requires control from a GUI that adjusts different parameters necessary for the AO simulator\u2019s function. This GUI will also control some AO parameters, such as the wavefront sensor\u2019s gain, and frame rate, as well as have the ability to invoke other AO operational GUIs. The ultimate goal of this project was to create an intuitive GUI that could be used by astronomers and engineers alike. Here is a list of blah blah connection gain timer this is a hyperlink example and a bold example .","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#kapa-telescope-simulator","text":"The Keck All-sky Precision Adaptive-optics (KAPA) project will be a next-generation tomographic laser AO system, projected to begin operation at the W.M. Keck Observatory in 2024. To test their AO algorithm, Keck has built a Telescope Simulator that simulates the KAPA system on a smaller scale and more controlled environment. The KAPA Telescope Simulator is being further modified to include a turbulence simulator, which includes a glass phase screen, to simulate typical atmospheric turbulence at various altitudes and wind speeds. This simulator must move extremely precisely in two-dimensions, and will do so via two precision translation stages.","title":"KAPA Telescope Simulator"},{"location":"about/#gui","text":"The turbulence simulator requires control from a GUI that adjusts different parameters necessary for the AO simulator\u2019s function. This GUI will also control some AO parameters, such as the wavefront sensor\u2019s gain, and frame rate, as well as have the ability to invoke other AO operational GUIs. The ultimate goal of this project was to create an intuitive GUI that could be used by astronomers and engineers alike. Here is a list of blah blah connection gain timer this is a hyperlink example and a bold example .","title":"GUI"}]}