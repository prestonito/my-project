{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TelSIM GUI Documentation Author: Preston Ito Last updated: 18 July 2022 Details (directory, imports, etc.) Code/.ui file directory The two components needed for this project are the python file and the .ui file. The .ui file is essentialy the layout of the GUI, and is created in Qt Designer. Both files can be found at: /usr/local/home/pito/kroot/src/kss/ao/tsim/TelSimGUI The final python file is called 1SMGUI.py and the final .ui file is called dummy.ui One can add/remove widgets to the .ui file and reconfigure them accordingly. Breaking the layout is necessary to reformatting the widgets. Note: It is reccommended to make a copy of the .ui file and edit that newly created version to keep the working .ui file untouched, because Qt Designer can be finicky and difficult to work with. Imports and KPython Address These are all the imports necessary for the code. It also has KPython address and sets up EPICS channels for translation stage simulators. A good chunk of this code comes from another GUI project created by Paul Richards. His source code was used as a template for this GUI. #! @KPYTHON3@ # # kpython safely sets RELDIR, KROOT, LROOT, and PYTHONPATH before invoking # the actual Python interpreter. # Setup an EPICS address list if one is not already defined import os import subprocess import datetime import time addrs = 'localhost:5064 vm-k1epicsgateway:5064 vm-k2epicsgateway:5064 k1aoserver-new:8607 localhost:5555 localhost:5556' print(f'Overriding EPICS address list to: {addrs}') os.environ['EPICS_CA_ADDR_LIST'] = addrs os.environ['EPICS_CA_AUTO_ADDR_LIST'] = 'NO' # Keck library includes import ktl # provided by kroot/ktl/keyword/python import kPyQt # provided by kroot/kui/kPyQt import logging, coloredlogs import argparse import sys import datetime import base64 from dateutil.parser import isoparse import requests import io from enum import Enum, auto import urllib import functools from PyQt5 import QtCore, QtWidgets, uic from PyQt5.QtWidgets import QStatusBar, QMessageBox, QWidget, QVBoxLayout, QLabel, QPushButton, \\ QToolButton, QSpacerItem, QSizePolicy, QFileDialog, QShortcut, QLCDNumber, QLayout from PyQt5.QtCore import Qt, QSize, QTimer from PyQt5.QtGui import QFont, QIcon, QPixmap, QImage, QIntValidator, QDoubleValidator, QKeySequence from PyQt5.Qt import QApplication from PToggle import PToggle, PAnimatedToggle from datetime import datetime Constants, showDialog function, and state machine class These are all of the constants used throughout the code. A showDialog function is included to be called whenever QMessageBoxes are used. The code was structured using state machines. debug = False SECONDS = 1 FONTBOLD = 'Montserrat SemiBold' FONTLIGHT = 'Montserrat Light' STATUSBAR_WHITE_STYLE = 'QStatusBar{padding-left:8px;background:white;color:black;font-weight:bold;}' STATUSBAR_YELLOW_STYLE = 'QStatusBar{padding-left:8px;background:yellow;color:black;font-weight:bold;}' EDIT_STYLE = 'font: 25 14pt \"Montserrat SemiBold\";' MODE_CLEAR_STYLE = 'background-color: rgb(255, 255, 255);' MODE_SET_STYLE = 'background-color: rgb(0, 170, 0);' MODE_UNSET_STYLE = 'background-color: rgb(170, 170, 170);' STATUS_RED_STYLE = 'background-color: rgb(255, 0, 0);' STATUS_GREEN_STYLE = 'background-color: rgb(0, 255, 0);' MESSAGE_LIMIT = 100 class TelSimStates(Enum): OFF = 0 ON = auto() IDLE = auto() MOVE_ALT = auto() AWAIT_ALT = auto() MOVE_WIND = auto() AWAIT_WIND = auto() STOPPED = auto() CLEANUP = auto() AWAIT_CLEANUP = auto() def showDialog(text, yes=False, cancel=False): ''' Show a message box to the user. :param text: The message to be displayed. :param yes: Use \"Yes/No\" instead of \"OK/Cancel\" :param cancel: Show a Cancel button, versus just OK. :return: Nothing. ''' # Create a message box msgBox = QtWidgets.QMessageBox() msgBox.setIcon(QMessageBox.Information) msgBox.setText(text) msgBox.setWindowTitle('Message') # Add buttons, either OK or OK+Cancel or Yes+No if yes: msgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No) elif cancel: msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel) else: msgBox.setStandardButtons(QMessageBox.Ok) # Test the return from the message box returnValue = msgBox.exec() if returnValue in [QMessageBox.Ok, QMessageBox.Yes]: return True else: return False The initializer function def __init__(self, *args, **kwargs): # self.list = None self.popups = {} self.template = None # Make access to data be thread safe with a mutex (chart data, in particular) self._mutex = QtCore.QMutex() QtWidgets.QMainWindow.__init__(self, *args, **kwargs) # Load the UI file uifile = 'dummy.ui' path = '.' filename = os.path.join(path, uifile) if not os.path.exists(filename): filename = os.path.join(os.environ['KROOT'], 'rel/uno/default/data', uifile) uic.loadUi(filename, self) To load a new .ui file, change the line: uifile = '{NEW_FILE.UI}' Setup UI This is where all of the setup occurs; Everything from setting the GUI title to connecting to simulator channels. Display Some display features are edited here. A list of widgets are kept to enable/disable with ease. def setupUI(self, channels=None): title = 'Telescope Simulator GUI' self.setWindowTitle(title) # ----------------------------------------------------------------------------- # Make the menu bar work the same across all platforms (looking at you, MacOS) self.menubar.setNativeMenuBar(False) # Enabling/disabling feature when TelSIM button pressed self.controls = [self.windTSBox, self.TSBox, self.altGroupBox, self.wavefrontGroupBox, self.fileGroupBox, self.loopocBox, self.loopControlLabel] Timers The countdownTimer (the timer used for the display countdown while Wind TS is moving) is created here. 'Setting single shot' ensures that the timer only runs once and doesn't keep repeating once it finishes counting down. # Timers self.countdownTimer = QTimer() # Display timer self.countdownTimer.setSingleShot(True) self.LCDnumbers.display(\"0.00\") self.secondsToMove = 0 Actions Connects buttons/text fields/radio buttons to their respective functions. For the input boxes, set a boolean attribute to ensure background color change only when user is editing (and not when it gets signals from the channel). # Actions! Connects buttons/text fields to functions self.selectFileButton.clicked.connect(self.fileSelection) self.reconstructorButton.clicked.connect(self.reconstructorSelection) self.gainInput.editingFinished.connect(lambda: self.gainCheck(self.gainInput.text())) self.frameRateInput.editingFinished.connect(lambda: self.frameRateCheck(self.frameRateInput.text())) self.bin.toggled.connect(lambda: self.frameRateCheck(self.frameRateInput.text())) self.unbin.toggled.connect(lambda: self.frameRateCheck(self.frameRateInput.text())) # Creates 'changed' attributes for the background color feature while editing setattr(self.posBox, 'changed', False) self.posBox.editingFinished.connect(lambda: self.posCheck(self.posBox.text())) self.posBox.textChanged.connect(lambda: self.editTextChanged(self.posBox)) setattr(self.velBox, 'changed', False) self.velBox.editingFinished.connect(lambda: self.velCheck(self.velBox.text())) self.velBox.textChanged.connect(lambda: self.editTextChanged(self.velBox)) setattr(self.accelBox, 'changed', False) self.accelBox.editingFinished.connect(lambda: self.accelCheck(self.accelBox.text())) self.accelBox.textChanged.connect(lambda: self.editTextChanged(self.accelBox)) setattr(self.altBox, 'changed', False) self.altBox.editingFinished.connect(lambda: self.altCheck(self.altBox.text())) self.altBox.textChanged.connect(lambda: self.editTextChanged(self.altBox)) Channels Connects to the different channels. The different types are RBV (read back value), VAL (position value), VELO (velocity), ACCL (acceleration), MOVN (returns moving status), SPMG (returns one of these values: Stop, Pause, Move, Go). Note: Writing a position value must be done to the .VAL, while reading back it's position is done through .RBV. # Channel creation for the emulator self.posChan = kPyQt.caFactory(\"wndsim:ln:m1.RBV\", kPyQt.Channel.caFloat) self.posWritingChan = kPyQt.caFactory(\"wndsim:ln:m1.VAL\", kPyQt.Channel.caFloat) self.velChan = kPyQt.caFactory(\"wndsim:ln:m1.VELO\", kPyQt.Channel.caFloat) self.accelChan = kPyQt.caFactory(\"wndsim:ln:m1.ACCL\", kPyQt.Channel.caFloat) self.altChan = kPyQt.caFactory(\"altsim:ln:m1.RBV\", kPyQt.Channel.caFloat) self.altWritingChan = kPyQt.caFactory(\"altsim:ln:m1.VAL\", kPyQt.Channel.caFloat) self.altMovingChan = kPyQt.caFactory(\"altsim:ln:m1.MOVN\", kPyQt.Channel.caFloat) self.windStopChan = kPyQt.caFactory(\"wndsim:ln:m1.SPMG\", kPyQt.Channel.caFloat) self.altStopChan = kPyQt.caFactory(\"altsim:ln:m1.SPMG\", kPyQt.Channel.caFloat) Toggle Visual Note: PToggle is a separate python file that was imported at the top. The code can be found on the left as a subsection. Below is the code that implements PToggle to create a toggle button for the two translation stage's connection status. # ------ Translation stages' toggles -------------------------------------------- self.TS1 = PToggle(handle_color=Qt.red, checked_color=Qt.green) TS1lay = QVBoxLayout() TS1lay.addWidget(self.TS1) self.TS1tog.setLayout(TS1lay) self.TS1.setCheckState(Qt.Unchecked) self.TS2 = PToggle(handle_color=Qt.red, checked_color=Qt.green) TS2lay = QVBoxLayout() TS2lay.addWidget(self.TS2) self.TS2tog.setLayout(TS2lay) self.TS2.setCheckState(Qt.Unchecked) Toggle Code from PyQt5.QtCore import ( Qt, QSize, QPoint, QPointF, QRectF, QEasingCurve, QPropertyAnimation, QSequentialAnimationGroup, pyqtSlot, pyqtProperty) from PyQt5.QtWidgets import QCheckBox from PyQt5.QtGui import QColor, QBrush, QPaintEvent, QPen, QPainter from PyQt5.QtCore import pyqtSlot as Slot, pyqtProperty as Property class PToggle(QCheckBox): \"\"\"Derived from qtwidgets.Toggle at https://github.com/pythonguis/python-qtwidgets/blob/master/qtwidgets/toggle/toggle.py\"\"\" _transparent_pen = QPen(Qt.transparent) _light_grey_pen = QPen(Qt.lightGray) _dark_gray_pen = QPen(Qt.darkGray) def __init__(self, parent=None, bar_color=Qt.gray, checked_color=\"#00B0FF\", handle_color=Qt.white, ): super().__init__(parent) # Save our properties on the object via self, so we can access them later # in the paintEvent. self._bar_brush = QBrush(bar_color) self._bar_checked_brush = QBrush(QColor(checked_color).lighter()) self._bar_partially_checked_brush = QBrush(Qt.gray) self._handle_brush = QBrush(handle_color) self._handle_checked_brush = QBrush(QColor(checked_color)) self._handle_partially_checked_brush = QBrush(Qt.gray) self._handle_disabled_brush = QBrush(Qt.darkGray) # Setup the rest of the widget. self.setContentsMargins(8, 0, 8, 0) self._handle_position = 0 self.stateChanged.connect(self.handle_state_change) def sizeHint(self): return QSize(58, 45) def hitButton(self, pos: QPoint): return self.contentsRect().contains(pos) def paintEvent(self, e: QPaintEvent): contRect = self.contentsRect() handleRadius = round(0.24 * contRect.height()) p = QPainter(self) p.setRenderHint(QPainter.Antialiasing) p.setPen(self._transparent_pen) barRect = QRectF( 0, 0, contRect.width() - handleRadius, 0.40 * contRect.height() ) barRect.moveCenter(contRect.center()) rounding = barRect.height() / 2 # the handle will move along this line trailLength = contRect.width() - 2 * handleRadius xPos = contRect.x() + handleRadius + trailLength * self._handle_position if self.checkState() == Qt.PartiallyChecked: p.setBrush(self._bar_partially_checked_brush) p.drawRoundedRect(barRect, rounding, rounding) # Don't draw the handle if partially checked! elif self.checkState() == Qt.Checked: p.setBrush(self._bar_checked_brush) p.drawRoundedRect(barRect, rounding, rounding) if self.isEnabled(): p.setBrush(self._handle_checked_brush) else: p.setBrush(self._handle_disabled_brush) p.drawEllipse(QPointF(xPos, barRect.center().y()), handleRadius, handleRadius) # Unchecked else: p.setBrush(self._bar_brush) p.drawRoundedRect(barRect, rounding, rounding) p.setPen(self._light_grey_pen) if self.isEnabled(): p.setBrush(self._handle_brush) else: p.setBrush(self._handle_disabled_brush) p.drawEllipse(QPointF(xPos, barRect.center().y()), handleRadius, handleRadius) p.end() @Slot(int) def handle_state_change(self, value): self._handle_position = 1 if value else 0 @Property(float) def handle_position(self): return self._handle_position @handle_position.setter def handle_position(self, pos): \"\"\"change the property we need to trigger QWidget.update() method, either by: 1- calling it here [ what we're doing ]. 2- connecting the QPropertyAnimation.valueChanged() signal to it. \"\"\" self._handle_position = pos self.update() @Property(float) def pulse_radius(self): return self._pulse_radius @pulse_radius.setter def pulse_radius(self, pos): self._pulse_radius = pos self.update() class PAnimatedToggle(PToggle): _transparent_pen = QPen(Qt.transparent) _light_grey_pen = QPen(Qt.lightGray) def __init__(self, *args, pulse_unchecked_color=\"#44999999\", pulse_checked_color=\"#4400B0EE\", **kwargs): self._pulse_radius = 0 super().__init__(*args, **kwargs) self.animation = QPropertyAnimation(self, b\"handle_position\", self) self.animation.setEasingCurve(QEasingCurve.InOutCubic) self.animation.setDuration(200) # time in ms self.pulse_anim = QPropertyAnimation(self, b\"pulse_radius\", self) self.pulse_anim.setDuration(350) # time in ms self.pulse_anim.setStartValue(10) self.pulse_anim.setEndValue(20) self.animations_group = QSequentialAnimationGroup() self.animations_group.addAnimation(self.animation) self.animations_group.addAnimation(self.pulse_anim) self._pulse_unchecked_animation = QBrush(QColor(pulse_unchecked_color)) self._pulse_checked_animation = QBrush(QColor(pulse_checked_color)) @Slot(int) def handle_state_change(self, value): self.animations_group.stop() if value: self.animation.setEndValue(1) else: self.animation.setEndValue(0) self.animations_group.start() def paintEvent(self, e: QPaintEvent): contRect = self.contentsRect() handleRadius = round(0.24 * contRect.height()) p = QPainter(self) p.setRenderHint(QPainter.Antialiasing) p.setPen(self._transparent_pen) barRect = QRectF( 0, 0, contRect.width() - handleRadius, 0.40 * contRect.height() ) barRect.moveCenter(contRect.center()) rounding = barRect.height() / 2 # the handle will move along this line trailLength = contRect.width() - 2 * handleRadius xPos = contRect.x() + handleRadius + trailLength * self._handle_position # Animate, unless partially checked if self.checkState() in [Qt.Checked, Qt.Unchecked]: if self.pulse_anim.state() == QPropertyAnimation.Running: p.setBrush( self._pulse_checked_animation if self.isChecked() else self._pulse_unchecked_animation) p.drawEllipse(QPointF(xPos, barRect.center().y()), self._pulse_radius, self._pulse_radius) if self.checkState() == Qt.PartiallyChecked: p.setBrush(self._bar_partially_checked_brush) p.drawRoundedRect(barRect, rounding, rounding) # Don't draw the handle if partially checked! elif self.checkState() == Qt.Checked: p.setBrush(self._bar_checked_brush) p.drawRoundedRect(barRect, rounding, rounding) if self.isEnabled(): p.setBrush(self._handle_checked_brush) else: p.setBrush(self._handle_disabled_brush) p.drawEllipse(QPointF(xPos, barRect.center().y()),handleRadius, handleRadius) else: p.setBrush(self._bar_brush) p.drawRoundedRect(barRect, rounding, rounding) p.setPen(self._light_grey_pen) if self.isEnabled(): p.setBrush(self._handle_brush) else: p.setBrush(self._handle_disabled_brush) p.drawEllipse(QPointF(xPos, barRect.center().y()),handleRadius, handleRadius) p.end() State machine support Code that connects some functions necessary to transition between states in the state machine. self.setupTelSIMButtonWasPressed = False self.setupTelSIMButton.clicked.connect(self.setupTelSIMButtonPressed) self.closeTelSIMButtonWasPressed = False self.closeTelSIMButton.clicked.connect(self.closeTelSIMButtonPressed) self.startButtonWasPressed = False self.startButton.clicked.connect(self.startButtonPressed) self.stopButtonWasPressed = False self.stopButton.clicked.connect(self.stopButtonPressed) self.state = TelSimStates.OFF self.stateMachineTimer = QTimer() self.stateMachineTimer.timeout.connect(self.stateMachine) self.stateMachineTimer.start(75) Functions to trigger states Creation of the actual functions connected to the buttons (start, stop, setupTelSIM, closeTelSIM). def setupTelSIMButtonPressed(self): \"\"\" Trigger the state machine with a button press. :return: \"\"\" self.setupTelSIMButtonWasPressed = True def closeTelSIMButtonPressed(self): \"\"\" Trigger the state machine with a button press. :return: \"\"\" self.closeTelSIMButtonWasPressed = True def startButtonPressed(self): \"\"\" Trigger MOVE_ALT stage with a button press. :return: \"\"\" self.startButtonWasPressed = True def stopButtonPressed(self): \"\"\" Trigger MOVE_ALT stage with a button press. :return: \"\"\" self.stopButtonWasPressed = True State Machine Function that starts the state machine. def stateMachine(self): \"\"\" State machine processing. :return: \"\"\" self.statusbar.showMessage(f'STATE: {self.state.name}') State: OFF The OFF state has everything disabled except for the setupTelSIM button. Transitions to ON state if setupTelSIM button was pressed. # ----- STATE 0 ------------------------------------------------ if self.state == TelSimStates.OFF: # Update GUI widgets for the OFF state self.startButton.setVisible(True) self.startButton.setEnabled(False) self.stopButton.setVisible(False) self.setupTelSIMButton.setEnabled(True) self.setupTelSIMButton.setVisible(True) self.closeTelSIMButton.setEnabled(False) self.closeTelSIMButton.setVisible(False) for i in self.controls: i.setEnabled(False) # Disable the widgets # If setup is pressed, advance to IDLE if self.setupTelSIMButtonWasPressed: self.setupTelSIMButtonWasPressed = False # Advance the state machine self.state = TelSimStates.ON return return State: ON The ON state connects the callbacks to start displaying the constant refreshing of the pos/vel/accel/alt values. Note: This had to be separated from the IDLE state because .runCallbacks() only needed to be called once upon starting up. Otherwise, the input boxes would always refresh and make it difficult for the user to edit. # ----- STATE 1 --------------------------------------------- elif self.state == TelSimStates.ON: # Connects to the channels to read and display the values self.posChan.floatCallback.connect(self.posBoxSetText) self.posChan.runCallbacks() self.velChan.floatCallback.connect(self.velBoxSetText) self.velChan.runCallbacks() self.accelChan.floatCallback.connect(self.accelBoxSetText) self.accelChan.runCallbacks() self.altChan.floatCallback.connect(self.altBoxSetText) self.altChan.runCallbacks() self.state = TelSimStates.IDLE return State: IDLE The IDLE state enables all of the input widgets and waits for the user to hit the Start button or the closeTelSIM button and changes the state accordingly. # ----- STATE 2 ----------------------------------------- elif self.state == TelSimStates.IDLE: # Update GUI widgets for the ON state self.startButton.setVisible(True) self.startButton.setEnabled(True) self.stopButton.setVisible(False) self.stopButton.setEnabled(False) self.setupTelSIMButton.setEnabled(False) self.setupTelSIMButton.setVisible(False) self.closeTelSIMButton.setEnabled(True) self.closeTelSIMButton.setVisible(True) self.LCDnumbers.display(\"0.00\") for i in self.controls: i.setEnabled(True) # Enable the widgets if self.startButtonWasPressed: self.startButtonWasPressed = False self.state = TelSimStates.MOVE_ALT return if self.closeTelSIMButtonWasPressed: self.closeTelSIMButtonWasPressed = False self.state = TelSimStates.CLEANUP return return State: MOVE_ALT The MOVE_ALT state does a rough calculation of amount of time to move the wind TS and stores that in self.secondsToMove . It also uses the showDialog function (shown in the Details section) to ask the user to verify the start. Once verified, it will write '3' to the .SPMG channel (3 is equal to 'MOVE', in case it's currently stopped) before writing the value in the altbox to the .VAL channel. Transition to the AWAIT_ALT state is automatic once these values have been written. # ----- STATE 3 ----------------------------------------- elif self.state == TelSimStates.MOVE_ALT: self.finalPos = self.posBox.text() self.finalAlt = self.altBox.text() self.initialPos = float(self.posChan.read()) self.secondsToMove = abs(float(self.initialPos) - float(self.finalPos)) / float(self.velBox.text()) print(self.secondsToMove) self.LCDnumbers.display(f\"{self.secondsToMove:0.2f}\") self.initialAlt = float(self.altChan.read()) if showDialog(\"Are you sure you want to START?\", yes=True, cancel=True): for i in self.controls: i.setEnabled(False) # Disable the widgets self.startButton.setVisible(False) self.startButton.setEnabled(False) self.stopButton.setVisible(True) self.stopButton.setEnabled(True) print(\"altBox.text: \" + self.altBox.text()) # if self.altStopChan.read() == \"0\": self.altStopChan.write(\"3\") self.altWrite(self.altBox.text()) self.altBox.changed = False self.state = TelSimStates.AWAIT_ALT return else: self.state = TelSimStates.IDLE return State: AWAIT_ALT Waits for the alt TS to get to its destination. Once it reaches its destination, transitions to the MOVE_WIND state. If Stop button was pressed, transitions to STOPPED state. # STATE 3 elif self.state == TelSimStates.AWAIT_ALT: # use less than or equal to instead of == x = float(self.altChan.read()) y = float(self.finalAlt) if x == y: self.state = TelSimStates.MOVE_WIND return if self.stopButtonWasPressed: self.stopButtonWasPressed = False self.state = TelSimStates.STOPPED return return State: MOVE_WIND Acts similarly to the MOVE_ALT state. Also starts the timer with the self.secondsToMove value calculated in the MOVE_ALT state. Transitions to AWAIT_WIND state automatically. # STATE 4 elif self.state == TelSimStates.MOVE_WIND: print(\"move wind\") self.posBox.changed = False self.velBox.changed = False self.accelBox.changed = False self.windStopChan.write(\"3\") self.accelWrite(self.accelBox.text()) self.velWrite(self.velBox.text()) self.posWrite(self.posBox.text()) self.countdownTimer.start(int(self.secondsToMove) * 1000) self.state = TelSimStates.AWAIT_WIND return State: AWAIT_WIND Acts similarly to the AWAIT_ALT state. Once the wind TS reaches its destination, transitions to the IDLE state. # STATE 5 elif self.state == TelSimStates.AWAIT_WIND: self.timeLeft = self.countdownTimer.remainingTime() / 1000 self.LCDnumbers.display(f\"{self.timeLeft:0.2f}\") if round(float(self.posChan.read())) == round(float(self.finalPos)): self.state = TelSimStates.IDLE return if self.stopButtonWasPressed: self.stopButtonWasPressed = False self.state = TelSimStates.STOPPED return return State: STOPPED Writes '0' to the two .SPMG channels ('0' is equal to 'Stop') and stops the timer. Automatically transitions to IDLE state. # STATE 6 elif self.state == TelSimStates.STOPPED: self.windStopChan.write(\"0\") self.altStopChan.write(\"0\") self.countdownTimer.stop() self.state = TelSimStates.IDLE return State: CLEANUP Enables/disables widgets accordingly. Sends the two TS to their 'home' position. Automatically transitions to AWAIT_CLEANUP state. # STATE 7 elif self.state == TelSimStates.CLEANUP: print(\"cleaning!\") self.closeTelSIMButton.setVisible(False) self.closeTelSIMButton.setEnabled(False) self.setupTelSIMButton.setVisible(True) self.setupTelSIMButton.setEnabled(False) self.startstopBox.setEnabled(False) for i in self.controls: i.setEnabled(False) self.posWrite(0.00) self.velWrite(2.00) self.accelWrite(0.10) self.altWrite(5.0) self.state = TelSimStates.AWAIT_CLEANUP return State: AWAIT_CLEANUP Waits for the two TS to get to their 'home' position before transitioning to OFF state. # STATE 8 elif self.state == TelSimStates.AWAIT_CLEANUP: if float(self.windStopChan.read()) >= 0.0: if float(self.altStopChan.read()) >= 0.0: if float(self.accelChan.read()) >= 0.1: if float(self.velChan.read()) >= 2.0: self.state = TelSimStates.OFF return return Color changing editTextChanged and editFinished These functions are responsible for changing the background color to red while the user is inputting a value, and changing it back once they're finished. # ------------------------------------------------------- def editTextChanged(self, edit): '''Qt signal that something was typed in the edit field''' edit.changed = True edit.setStyleSheet('background-color: red') # -------------------------------------------------------- def editFinished(self, edit): '''Qt signal that the edit field lost focus when editing, revert the value''' if edit.changed: edit.setText(edit.undoText) edit.changed = False edit.setStyleSheet(self.editStyleSheet) Blocking signals These functions use the attribute 'changed' (that was created in the Setup UI section) to prevent changing the color to red if it's receiving signals from the emulator. That way, it'll only change to red if the user is inputting changes. ef posBoxSetText(self, val): if not self.posBox.changed: self.posBox.setStyleSheet(\"\") self.posBox.blockSignals(True) # Turn off signals to the edit, a human is not editing it! self.posBox.setText(f\"{val:0.2f}\") self.posBox.blockSignals(False) # Turn on signals to the edit, a human is not editing it! def velBoxSetText(self, val): if not self.velBox.changed: self.velBox.setStyleSheet(\"\") self.velBox.blockSignals(True) # Turn off signals to the edit, a human is not editing it! self.velBox.setText(f\"{val:0.2f}\") self.velBox.blockSignals(False) # Turn on signals to the edit, a human is not editing it! def accelBoxSetText(self, val): if not self.accelBox.changed: self.accelBox.setStyleSheet(\"\") self.accelBox.blockSignals(True) # Turn off signals to the edit, a human is not editing it! self.accelBox.setText(f\"{val:0.2f}\") self.accelBox.blockSignals(False) # Turn on signals to the edit, a human is not editing it! def altBoxSetText(self, val): if not self.altBox.changed: self.altBox.setStyleSheet(\"\") self.altBox.blockSignals(True) # Turn off signals to the edit, a human is not editing it! self.altBox.setText(f\"{val:0.1f}\") self.altBox.blockSignals(False) # Turn on signals to the edit, a human is not editing it! Input Verification and Writing Validators These functions make sure that the value entered in the field is within bounds. If the user is finished editing (clicks away), then the showDialog function is used to give an error message. # --- Corrects pos/vel/accel/alt values after edited? -------------------- def posCheck(self, msg): ''' Makes sure the value entered in the field is within bounds. If not, will show error message. Also assigns self.finalPos used later for calculating time it will take to move :param msg: Value entered in posBox text box :return: ''' self.posBox.validator = QDoubleValidator(-40.00, 40.00, 2, notation=QDoubleValidator.StandardNotation) if QDoubleValidator.validate(self.posBox.validator, str(msg), 0)[0] != 2: self.posBox.setText(f\"{float(self.posChan.read()):0.2f}\") showDialog(\"Position must be a float between -40.00 and 40.00\") # else: # self.finalPos = msg def velCheck(self, msg): self.velBox.validator = QDoubleValidator(2.00, 80.00, 2, notation=QDoubleValidator.StandardNotation) if QDoubleValidator.validate(self.velBox.validator, str(msg), 0)[0] != 2: self.velBox.setText(f\"{float(self.velChan.read()):0.2f}\") showDialog(\"Velocity must be a float between 2.00 and 80.00\") else: self.velVal = msg def accelCheck(self, msg): self.accelBox.validator = QDoubleValidator(0.00, 10.00, 2, notation=QDoubleValidator.StandardNotation) if QDoubleValidator.validate(self.accelBox.validator, str(msg), 0)[0] != 2: self.accelBox.setText(f\"{float(self.accelChan.read()):0.2f}\") showDialog(\"Acceleration must be a float between 0.00 and 10.00\") def gainCheck(self, msg): if msg != '': # DELETE THIS LINE ONCE ACTUALLY CONNECTED self.gainInput.validator = QIntValidator(1, 600, self) if QIntValidator.validate(self.gainInput.validator, str(msg), 0)[0] != 2: self.gainInput.setText(\"1\") showDialog(\"Gain must be an integer between 1 and 600; automatically reset gain to 1\") def altCheck(self, msg): if msg != '': # DELETE THIS LINE ONCE ACTUALLY CONNECTED self.altBox.validator = QDoubleValidator(5.0, 12.0, 1, notation=QDoubleValidator.StandardNotation) if QDoubleValidator.validate(self.altBox.validator, str(msg), 0)[0] != 2: self.altBox.setText(f\"{float(self.altChan.read()):0.1f}\") showDialog(\"Altitude must be between 5.0 and 12.0; automatically reset altitude to 5.0\") # else: # self.finalAlt = msg def frameRateCheck(self, msg): if msg != '': # DELETE THIS LINE ONCE ACTUALLY CONNECTED if self.unbin.isChecked() == True: self.frameRateInput.validator = QIntValidator(1, UNBINNED_MODE, self) else: self.frameRateInput.validator = QIntValidator(1, BINNED_MODE, self) if QIntValidator.validate(self.frameRateInput.validator, str(msg), 0)[0] != 2: self.frameRateInput.setText(\"1\") showDialog(\"Frame rate must be integer between 1-2000 when in unbinned mode and \" \"1-3600 when in binned mode; automatically reset frame to 1\") Writing to channel These functions write the value passed through to the appropriate channel. The wait=False in the position and altitude writing channels are necessary to allow the user to stop the motion while the stages are moving to their destination. # ---- Writes the pos/vel/accel/alt to the emulator -------------------------------------------- def posWrite(self, msg): ''' Writes the value to the writing channel :param msg: Position value ''' f = float(msg) self.posWritingChan.write(f, wait=False) def velWrite(self, msg): f = float(msg) self.velChan.write(f) def accelWrite(self, msg): f = float(msg) self.accelChan.write(f) def altWrite(self, msg): f = float(msg) self.altWritingChan.write(f, wait=False) Main function if __name__ == '__main__': # ------------------------------------------------------------------------- # Commandline arguments parser = argparse.ArgumentParser(description='Turbulence Simulator GUI') parser.add_argument('-d', '--debug', help='Enable debugging output', action='store_true') args = parser.parse_args() # Get the debug argument first, as it drives our logging choices if args.debug: debug = True # ------------------------------------------------------------------------- # Set up the base logger all threads will use, once we know the debug flag coloredlogs.DEFAULT_LOG_FORMAT = '%(asctime)s [%(levelname)s] %(message)s' coloredlogs.DEFAULT_DATE_FORMAT = '%Y-%m-%d %H:%M:%S.%f' if debug: coloredlogs.install(level='DEBUG') else: coloredlogs.install(level='INFO') log = logging.getLogger('') # Disable the debug logging from Qt logging.getLogger('PyQt5').setLevel(logging.WARNING) application = QtWidgets.QApplication(sys.argv) mainwin = TurbulenceSimulatorGUIMain() mainwin.setupUI() # mainwin.setMinimumSize(0, 0) # mainwin.resize(10,10) mainwin.show() # Run the Qt application status = kPyQt.run(application) sys.exit(status)","title":"Home"},{"location":"#telsim-gui-documentation","text":"Author: Preston Ito Last updated: 18 July 2022","title":"TelSIM GUI Documentation"},{"location":"#details-directory-imports-etc","text":"","title":"Details (directory, imports, etc.)"},{"location":"#codeui-file-directory","text":"The two components needed for this project are the python file and the .ui file. The .ui file is essentialy the layout of the GUI, and is created in Qt Designer. Both files can be found at: /usr/local/home/pito/kroot/src/kss/ao/tsim/TelSimGUI The final python file is called 1SMGUI.py and the final .ui file is called dummy.ui One can add/remove widgets to the .ui file and reconfigure them accordingly. Breaking the layout is necessary to reformatting the widgets. Note: It is reccommended to make a copy of the .ui file and edit that newly created version to keep the working .ui file untouched, because Qt Designer can be finicky and difficult to work with.","title":"Code/.ui file directory"},{"location":"#imports-and-kpython-address","text":"These are all the imports necessary for the code. It also has KPython address and sets up EPICS channels for translation stage simulators. A good chunk of this code comes from another GUI project created by Paul Richards. His source code was used as a template for this GUI. #! @KPYTHON3@ # # kpython safely sets RELDIR, KROOT, LROOT, and PYTHONPATH before invoking # the actual Python interpreter. # Setup an EPICS address list if one is not already defined import os import subprocess import datetime import time addrs = 'localhost:5064 vm-k1epicsgateway:5064 vm-k2epicsgateway:5064 k1aoserver-new:8607 localhost:5555 localhost:5556' print(f'Overriding EPICS address list to: {addrs}') os.environ['EPICS_CA_ADDR_LIST'] = addrs os.environ['EPICS_CA_AUTO_ADDR_LIST'] = 'NO' # Keck library includes import ktl # provided by kroot/ktl/keyword/python import kPyQt # provided by kroot/kui/kPyQt import logging, coloredlogs import argparse import sys import datetime import base64 from dateutil.parser import isoparse import requests import io from enum import Enum, auto import urllib import functools from PyQt5 import QtCore, QtWidgets, uic from PyQt5.QtWidgets import QStatusBar, QMessageBox, QWidget, QVBoxLayout, QLabel, QPushButton, \\ QToolButton, QSpacerItem, QSizePolicy, QFileDialog, QShortcut, QLCDNumber, QLayout from PyQt5.QtCore import Qt, QSize, QTimer from PyQt5.QtGui import QFont, QIcon, QPixmap, QImage, QIntValidator, QDoubleValidator, QKeySequence from PyQt5.Qt import QApplication from PToggle import PToggle, PAnimatedToggle from datetime import datetime","title":"Imports and KPython Address"},{"location":"#constants-showdialog-function-and-state-machine-class","text":"These are all of the constants used throughout the code. A showDialog function is included to be called whenever QMessageBoxes are used. The code was structured using state machines. debug = False SECONDS = 1 FONTBOLD = 'Montserrat SemiBold' FONTLIGHT = 'Montserrat Light' STATUSBAR_WHITE_STYLE = 'QStatusBar{padding-left:8px;background:white;color:black;font-weight:bold;}' STATUSBAR_YELLOW_STYLE = 'QStatusBar{padding-left:8px;background:yellow;color:black;font-weight:bold;}' EDIT_STYLE = 'font: 25 14pt \"Montserrat SemiBold\";' MODE_CLEAR_STYLE = 'background-color: rgb(255, 255, 255);' MODE_SET_STYLE = 'background-color: rgb(0, 170, 0);' MODE_UNSET_STYLE = 'background-color: rgb(170, 170, 170);' STATUS_RED_STYLE = 'background-color: rgb(255, 0, 0);' STATUS_GREEN_STYLE = 'background-color: rgb(0, 255, 0);' MESSAGE_LIMIT = 100 class TelSimStates(Enum): OFF = 0 ON = auto() IDLE = auto() MOVE_ALT = auto() AWAIT_ALT = auto() MOVE_WIND = auto() AWAIT_WIND = auto() STOPPED = auto() CLEANUP = auto() AWAIT_CLEANUP = auto() def showDialog(text, yes=False, cancel=False): ''' Show a message box to the user. :param text: The message to be displayed. :param yes: Use \"Yes/No\" instead of \"OK/Cancel\" :param cancel: Show a Cancel button, versus just OK. :return: Nothing. ''' # Create a message box msgBox = QtWidgets.QMessageBox() msgBox.setIcon(QMessageBox.Information) msgBox.setText(text) msgBox.setWindowTitle('Message') # Add buttons, either OK or OK+Cancel or Yes+No if yes: msgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No) elif cancel: msgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel) else: msgBox.setStandardButtons(QMessageBox.Ok) # Test the return from the message box returnValue = msgBox.exec() if returnValue in [QMessageBox.Ok, QMessageBox.Yes]: return True else: return False","title":"Constants, showDialog function, and state machine class"},{"location":"#the-initializer-function","text":"def __init__(self, *args, **kwargs): # self.list = None self.popups = {} self.template = None # Make access to data be thread safe with a mutex (chart data, in particular) self._mutex = QtCore.QMutex() QtWidgets.QMainWindow.__init__(self, *args, **kwargs) # Load the UI file uifile = 'dummy.ui' path = '.' filename = os.path.join(path, uifile) if not os.path.exists(filename): filename = os.path.join(os.environ['KROOT'], 'rel/uno/default/data', uifile) uic.loadUi(filename, self) To load a new .ui file, change the line: uifile = '{NEW_FILE.UI}'","title":"The initializer function"},{"location":"#setup-ui","text":"This is where all of the setup occurs; Everything from setting the GUI title to connecting to simulator channels.","title":"Setup UI"},{"location":"#display","text":"Some display features are edited here. A list of widgets are kept to enable/disable with ease. def setupUI(self, channels=None): title = 'Telescope Simulator GUI' self.setWindowTitle(title) # ----------------------------------------------------------------------------- # Make the menu bar work the same across all platforms (looking at you, MacOS) self.menubar.setNativeMenuBar(False) # Enabling/disabling feature when TelSIM button pressed self.controls = [self.windTSBox, self.TSBox, self.altGroupBox, self.wavefrontGroupBox, self.fileGroupBox, self.loopocBox, self.loopControlLabel]","title":"Display"},{"location":"#timers","text":"The countdownTimer (the timer used for the display countdown while Wind TS is moving) is created here. 'Setting single shot' ensures that the timer only runs once and doesn't keep repeating once it finishes counting down. # Timers self.countdownTimer = QTimer() # Display timer self.countdownTimer.setSingleShot(True) self.LCDnumbers.display(\"0.00\") self.secondsToMove = 0","title":"Timers"},{"location":"#actions","text":"Connects buttons/text fields/radio buttons to their respective functions. For the input boxes, set a boolean attribute to ensure background color change only when user is editing (and not when it gets signals from the channel). # Actions! Connects buttons/text fields to functions self.selectFileButton.clicked.connect(self.fileSelection) self.reconstructorButton.clicked.connect(self.reconstructorSelection) self.gainInput.editingFinished.connect(lambda: self.gainCheck(self.gainInput.text())) self.frameRateInput.editingFinished.connect(lambda: self.frameRateCheck(self.frameRateInput.text())) self.bin.toggled.connect(lambda: self.frameRateCheck(self.frameRateInput.text())) self.unbin.toggled.connect(lambda: self.frameRateCheck(self.frameRateInput.text())) # Creates 'changed' attributes for the background color feature while editing setattr(self.posBox, 'changed', False) self.posBox.editingFinished.connect(lambda: self.posCheck(self.posBox.text())) self.posBox.textChanged.connect(lambda: self.editTextChanged(self.posBox)) setattr(self.velBox, 'changed', False) self.velBox.editingFinished.connect(lambda: self.velCheck(self.velBox.text())) self.velBox.textChanged.connect(lambda: self.editTextChanged(self.velBox)) setattr(self.accelBox, 'changed', False) self.accelBox.editingFinished.connect(lambda: self.accelCheck(self.accelBox.text())) self.accelBox.textChanged.connect(lambda: self.editTextChanged(self.accelBox)) setattr(self.altBox, 'changed', False) self.altBox.editingFinished.connect(lambda: self.altCheck(self.altBox.text())) self.altBox.textChanged.connect(lambda: self.editTextChanged(self.altBox))","title":"Actions"},{"location":"#channels","text":"Connects to the different channels. The different types are RBV (read back value), VAL (position value), VELO (velocity), ACCL (acceleration), MOVN (returns moving status), SPMG (returns one of these values: Stop, Pause, Move, Go). Note: Writing a position value must be done to the .VAL, while reading back it's position is done through .RBV. # Channel creation for the emulator self.posChan = kPyQt.caFactory(\"wndsim:ln:m1.RBV\", kPyQt.Channel.caFloat) self.posWritingChan = kPyQt.caFactory(\"wndsim:ln:m1.VAL\", kPyQt.Channel.caFloat) self.velChan = kPyQt.caFactory(\"wndsim:ln:m1.VELO\", kPyQt.Channel.caFloat) self.accelChan = kPyQt.caFactory(\"wndsim:ln:m1.ACCL\", kPyQt.Channel.caFloat) self.altChan = kPyQt.caFactory(\"altsim:ln:m1.RBV\", kPyQt.Channel.caFloat) self.altWritingChan = kPyQt.caFactory(\"altsim:ln:m1.VAL\", kPyQt.Channel.caFloat) self.altMovingChan = kPyQt.caFactory(\"altsim:ln:m1.MOVN\", kPyQt.Channel.caFloat) self.windStopChan = kPyQt.caFactory(\"wndsim:ln:m1.SPMG\", kPyQt.Channel.caFloat) self.altStopChan = kPyQt.caFactory(\"altsim:ln:m1.SPMG\", kPyQt.Channel.caFloat)","title":"Channels"},{"location":"#toggle-visual","text":"Note: PToggle is a separate python file that was imported at the top. The code can be found on the left as a subsection. Below is the code that implements PToggle to create a toggle button for the two translation stage's connection status. # ------ Translation stages' toggles -------------------------------------------- self.TS1 = PToggle(handle_color=Qt.red, checked_color=Qt.green) TS1lay = QVBoxLayout() TS1lay.addWidget(self.TS1) self.TS1tog.setLayout(TS1lay) self.TS1.setCheckState(Qt.Unchecked) self.TS2 = PToggle(handle_color=Qt.red, checked_color=Qt.green) TS2lay = QVBoxLayout() TS2lay.addWidget(self.TS2) self.TS2tog.setLayout(TS2lay) self.TS2.setCheckState(Qt.Unchecked)","title":"Toggle Visual"},{"location":"#toggle-code","text":"from PyQt5.QtCore import ( Qt, QSize, QPoint, QPointF, QRectF, QEasingCurve, QPropertyAnimation, QSequentialAnimationGroup, pyqtSlot, pyqtProperty) from PyQt5.QtWidgets import QCheckBox from PyQt5.QtGui import QColor, QBrush, QPaintEvent, QPen, QPainter from PyQt5.QtCore import pyqtSlot as Slot, pyqtProperty as Property class PToggle(QCheckBox): \"\"\"Derived from qtwidgets.Toggle at https://github.com/pythonguis/python-qtwidgets/blob/master/qtwidgets/toggle/toggle.py\"\"\" _transparent_pen = QPen(Qt.transparent) _light_grey_pen = QPen(Qt.lightGray) _dark_gray_pen = QPen(Qt.darkGray) def __init__(self, parent=None, bar_color=Qt.gray, checked_color=\"#00B0FF\", handle_color=Qt.white, ): super().__init__(parent) # Save our properties on the object via self, so we can access them later # in the paintEvent. self._bar_brush = QBrush(bar_color) self._bar_checked_brush = QBrush(QColor(checked_color).lighter()) self._bar_partially_checked_brush = QBrush(Qt.gray) self._handle_brush = QBrush(handle_color) self._handle_checked_brush = QBrush(QColor(checked_color)) self._handle_partially_checked_brush = QBrush(Qt.gray) self._handle_disabled_brush = QBrush(Qt.darkGray) # Setup the rest of the widget. self.setContentsMargins(8, 0, 8, 0) self._handle_position = 0 self.stateChanged.connect(self.handle_state_change) def sizeHint(self): return QSize(58, 45) def hitButton(self, pos: QPoint): return self.contentsRect().contains(pos) def paintEvent(self, e: QPaintEvent): contRect = self.contentsRect() handleRadius = round(0.24 * contRect.height()) p = QPainter(self) p.setRenderHint(QPainter.Antialiasing) p.setPen(self._transparent_pen) barRect = QRectF( 0, 0, contRect.width() - handleRadius, 0.40 * contRect.height() ) barRect.moveCenter(contRect.center()) rounding = barRect.height() / 2 # the handle will move along this line trailLength = contRect.width() - 2 * handleRadius xPos = contRect.x() + handleRadius + trailLength * self._handle_position if self.checkState() == Qt.PartiallyChecked: p.setBrush(self._bar_partially_checked_brush) p.drawRoundedRect(barRect, rounding, rounding) # Don't draw the handle if partially checked! elif self.checkState() == Qt.Checked: p.setBrush(self._bar_checked_brush) p.drawRoundedRect(barRect, rounding, rounding) if self.isEnabled(): p.setBrush(self._handle_checked_brush) else: p.setBrush(self._handle_disabled_brush) p.drawEllipse(QPointF(xPos, barRect.center().y()), handleRadius, handleRadius) # Unchecked else: p.setBrush(self._bar_brush) p.drawRoundedRect(barRect, rounding, rounding) p.setPen(self._light_grey_pen) if self.isEnabled(): p.setBrush(self._handle_brush) else: p.setBrush(self._handle_disabled_brush) p.drawEllipse(QPointF(xPos, barRect.center().y()), handleRadius, handleRadius) p.end() @Slot(int) def handle_state_change(self, value): self._handle_position = 1 if value else 0 @Property(float) def handle_position(self): return self._handle_position @handle_position.setter def handle_position(self, pos): \"\"\"change the property we need to trigger QWidget.update() method, either by: 1- calling it here [ what we're doing ]. 2- connecting the QPropertyAnimation.valueChanged() signal to it. \"\"\" self._handle_position = pos self.update() @Property(float) def pulse_radius(self): return self._pulse_radius @pulse_radius.setter def pulse_radius(self, pos): self._pulse_radius = pos self.update() class PAnimatedToggle(PToggle): _transparent_pen = QPen(Qt.transparent) _light_grey_pen = QPen(Qt.lightGray) def __init__(self, *args, pulse_unchecked_color=\"#44999999\", pulse_checked_color=\"#4400B0EE\", **kwargs): self._pulse_radius = 0 super().__init__(*args, **kwargs) self.animation = QPropertyAnimation(self, b\"handle_position\", self) self.animation.setEasingCurve(QEasingCurve.InOutCubic) self.animation.setDuration(200) # time in ms self.pulse_anim = QPropertyAnimation(self, b\"pulse_radius\", self) self.pulse_anim.setDuration(350) # time in ms self.pulse_anim.setStartValue(10) self.pulse_anim.setEndValue(20) self.animations_group = QSequentialAnimationGroup() self.animations_group.addAnimation(self.animation) self.animations_group.addAnimation(self.pulse_anim) self._pulse_unchecked_animation = QBrush(QColor(pulse_unchecked_color)) self._pulse_checked_animation = QBrush(QColor(pulse_checked_color)) @Slot(int) def handle_state_change(self, value): self.animations_group.stop() if value: self.animation.setEndValue(1) else: self.animation.setEndValue(0) self.animations_group.start() def paintEvent(self, e: QPaintEvent): contRect = self.contentsRect() handleRadius = round(0.24 * contRect.height()) p = QPainter(self) p.setRenderHint(QPainter.Antialiasing) p.setPen(self._transparent_pen) barRect = QRectF( 0, 0, contRect.width() - handleRadius, 0.40 * contRect.height() ) barRect.moveCenter(contRect.center()) rounding = barRect.height() / 2 # the handle will move along this line trailLength = contRect.width() - 2 * handleRadius xPos = contRect.x() + handleRadius + trailLength * self._handle_position # Animate, unless partially checked if self.checkState() in [Qt.Checked, Qt.Unchecked]: if self.pulse_anim.state() == QPropertyAnimation.Running: p.setBrush( self._pulse_checked_animation if self.isChecked() else self._pulse_unchecked_animation) p.drawEllipse(QPointF(xPos, barRect.center().y()), self._pulse_radius, self._pulse_radius) if self.checkState() == Qt.PartiallyChecked: p.setBrush(self._bar_partially_checked_brush) p.drawRoundedRect(barRect, rounding, rounding) # Don't draw the handle if partially checked! elif self.checkState() == Qt.Checked: p.setBrush(self._bar_checked_brush) p.drawRoundedRect(barRect, rounding, rounding) if self.isEnabled(): p.setBrush(self._handle_checked_brush) else: p.setBrush(self._handle_disabled_brush) p.drawEllipse(QPointF(xPos, barRect.center().y()),handleRadius, handleRadius) else: p.setBrush(self._bar_brush) p.drawRoundedRect(barRect, rounding, rounding) p.setPen(self._light_grey_pen) if self.isEnabled(): p.setBrush(self._handle_brush) else: p.setBrush(self._handle_disabled_brush) p.drawEllipse(QPointF(xPos, barRect.center().y()),handleRadius, handleRadius) p.end()","title":"Toggle Code"},{"location":"#state-machine-support","text":"Code that connects some functions necessary to transition between states in the state machine. self.setupTelSIMButtonWasPressed = False self.setupTelSIMButton.clicked.connect(self.setupTelSIMButtonPressed) self.closeTelSIMButtonWasPressed = False self.closeTelSIMButton.clicked.connect(self.closeTelSIMButtonPressed) self.startButtonWasPressed = False self.startButton.clicked.connect(self.startButtonPressed) self.stopButtonWasPressed = False self.stopButton.clicked.connect(self.stopButtonPressed) self.state = TelSimStates.OFF self.stateMachineTimer = QTimer() self.stateMachineTimer.timeout.connect(self.stateMachine) self.stateMachineTimer.start(75)","title":"State machine support"},{"location":"#functions-to-trigger-states","text":"Creation of the actual functions connected to the buttons (start, stop, setupTelSIM, closeTelSIM). def setupTelSIMButtonPressed(self): \"\"\" Trigger the state machine with a button press. :return: \"\"\" self.setupTelSIMButtonWasPressed = True def closeTelSIMButtonPressed(self): \"\"\" Trigger the state machine with a button press. :return: \"\"\" self.closeTelSIMButtonWasPressed = True def startButtonPressed(self): \"\"\" Trigger MOVE_ALT stage with a button press. :return: \"\"\" self.startButtonWasPressed = True def stopButtonPressed(self): \"\"\" Trigger MOVE_ALT stage with a button press. :return: \"\"\" self.stopButtonWasPressed = True","title":"Functions to trigger states"},{"location":"#state-machine","text":"Function that starts the state machine. def stateMachine(self): \"\"\" State machine processing. :return: \"\"\" self.statusbar.showMessage(f'STATE: {self.state.name}')","title":"State Machine"},{"location":"#state-off","text":"The OFF state has everything disabled except for the setupTelSIM button. Transitions to ON state if setupTelSIM button was pressed. # ----- STATE 0 ------------------------------------------------ if self.state == TelSimStates.OFF: # Update GUI widgets for the OFF state self.startButton.setVisible(True) self.startButton.setEnabled(False) self.stopButton.setVisible(False) self.setupTelSIMButton.setEnabled(True) self.setupTelSIMButton.setVisible(True) self.closeTelSIMButton.setEnabled(False) self.closeTelSIMButton.setVisible(False) for i in self.controls: i.setEnabled(False) # Disable the widgets # If setup is pressed, advance to IDLE if self.setupTelSIMButtonWasPressed: self.setupTelSIMButtonWasPressed = False # Advance the state machine self.state = TelSimStates.ON return return","title":"State: OFF"},{"location":"#state-on","text":"The ON state connects the callbacks to start displaying the constant refreshing of the pos/vel/accel/alt values. Note: This had to be separated from the IDLE state because .runCallbacks() only needed to be called once upon starting up. Otherwise, the input boxes would always refresh and make it difficult for the user to edit. # ----- STATE 1 --------------------------------------------- elif self.state == TelSimStates.ON: # Connects to the channels to read and display the values self.posChan.floatCallback.connect(self.posBoxSetText) self.posChan.runCallbacks() self.velChan.floatCallback.connect(self.velBoxSetText) self.velChan.runCallbacks() self.accelChan.floatCallback.connect(self.accelBoxSetText) self.accelChan.runCallbacks() self.altChan.floatCallback.connect(self.altBoxSetText) self.altChan.runCallbacks() self.state = TelSimStates.IDLE return","title":"State: ON"},{"location":"#state-idle","text":"The IDLE state enables all of the input widgets and waits for the user to hit the Start button or the closeTelSIM button and changes the state accordingly. # ----- STATE 2 ----------------------------------------- elif self.state == TelSimStates.IDLE: # Update GUI widgets for the ON state self.startButton.setVisible(True) self.startButton.setEnabled(True) self.stopButton.setVisible(False) self.stopButton.setEnabled(False) self.setupTelSIMButton.setEnabled(False) self.setupTelSIMButton.setVisible(False) self.closeTelSIMButton.setEnabled(True) self.closeTelSIMButton.setVisible(True) self.LCDnumbers.display(\"0.00\") for i in self.controls: i.setEnabled(True) # Enable the widgets if self.startButtonWasPressed: self.startButtonWasPressed = False self.state = TelSimStates.MOVE_ALT return if self.closeTelSIMButtonWasPressed: self.closeTelSIMButtonWasPressed = False self.state = TelSimStates.CLEANUP return return","title":"State: IDLE"},{"location":"#state-move_alt","text":"The MOVE_ALT state does a rough calculation of amount of time to move the wind TS and stores that in self.secondsToMove . It also uses the showDialog function (shown in the Details section) to ask the user to verify the start. Once verified, it will write '3' to the .SPMG channel (3 is equal to 'MOVE', in case it's currently stopped) before writing the value in the altbox to the .VAL channel. Transition to the AWAIT_ALT state is automatic once these values have been written. # ----- STATE 3 ----------------------------------------- elif self.state == TelSimStates.MOVE_ALT: self.finalPos = self.posBox.text() self.finalAlt = self.altBox.text() self.initialPos = float(self.posChan.read()) self.secondsToMove = abs(float(self.initialPos) - float(self.finalPos)) / float(self.velBox.text()) print(self.secondsToMove) self.LCDnumbers.display(f\"{self.secondsToMove:0.2f}\") self.initialAlt = float(self.altChan.read()) if showDialog(\"Are you sure you want to START?\", yes=True, cancel=True): for i in self.controls: i.setEnabled(False) # Disable the widgets self.startButton.setVisible(False) self.startButton.setEnabled(False) self.stopButton.setVisible(True) self.stopButton.setEnabled(True) print(\"altBox.text: \" + self.altBox.text()) # if self.altStopChan.read() == \"0\": self.altStopChan.write(\"3\") self.altWrite(self.altBox.text()) self.altBox.changed = False self.state = TelSimStates.AWAIT_ALT return else: self.state = TelSimStates.IDLE return","title":"State: MOVE_ALT"},{"location":"#state-await_alt","text":"Waits for the alt TS to get to its destination. Once it reaches its destination, transitions to the MOVE_WIND state. If Stop button was pressed, transitions to STOPPED state. # STATE 3 elif self.state == TelSimStates.AWAIT_ALT: # use less than or equal to instead of == x = float(self.altChan.read()) y = float(self.finalAlt) if x == y: self.state = TelSimStates.MOVE_WIND return if self.stopButtonWasPressed: self.stopButtonWasPressed = False self.state = TelSimStates.STOPPED return return","title":"State: AWAIT_ALT"},{"location":"#state-move_wind","text":"Acts similarly to the MOVE_ALT state. Also starts the timer with the self.secondsToMove value calculated in the MOVE_ALT state. Transitions to AWAIT_WIND state automatically. # STATE 4 elif self.state == TelSimStates.MOVE_WIND: print(\"move wind\") self.posBox.changed = False self.velBox.changed = False self.accelBox.changed = False self.windStopChan.write(\"3\") self.accelWrite(self.accelBox.text()) self.velWrite(self.velBox.text()) self.posWrite(self.posBox.text()) self.countdownTimer.start(int(self.secondsToMove) * 1000) self.state = TelSimStates.AWAIT_WIND return","title":"State: MOVE_WIND"},{"location":"#state-await_wind","text":"Acts similarly to the AWAIT_ALT state. Once the wind TS reaches its destination, transitions to the IDLE state. # STATE 5 elif self.state == TelSimStates.AWAIT_WIND: self.timeLeft = self.countdownTimer.remainingTime() / 1000 self.LCDnumbers.display(f\"{self.timeLeft:0.2f}\") if round(float(self.posChan.read())) == round(float(self.finalPos)): self.state = TelSimStates.IDLE return if self.stopButtonWasPressed: self.stopButtonWasPressed = False self.state = TelSimStates.STOPPED return return","title":"State: AWAIT_WIND"},{"location":"#state-stopped","text":"Writes '0' to the two .SPMG channels ('0' is equal to 'Stop') and stops the timer. Automatically transitions to IDLE state. # STATE 6 elif self.state == TelSimStates.STOPPED: self.windStopChan.write(\"0\") self.altStopChan.write(\"0\") self.countdownTimer.stop() self.state = TelSimStates.IDLE return","title":"State: STOPPED"},{"location":"#state-cleanup","text":"Enables/disables widgets accordingly. Sends the two TS to their 'home' position. Automatically transitions to AWAIT_CLEANUP state. # STATE 7 elif self.state == TelSimStates.CLEANUP: print(\"cleaning!\") self.closeTelSIMButton.setVisible(False) self.closeTelSIMButton.setEnabled(False) self.setupTelSIMButton.setVisible(True) self.setupTelSIMButton.setEnabled(False) self.startstopBox.setEnabled(False) for i in self.controls: i.setEnabled(False) self.posWrite(0.00) self.velWrite(2.00) self.accelWrite(0.10) self.altWrite(5.0) self.state = TelSimStates.AWAIT_CLEANUP return","title":"State: CLEANUP"},{"location":"#state-await_cleanup","text":"Waits for the two TS to get to their 'home' position before transitioning to OFF state. # STATE 8 elif self.state == TelSimStates.AWAIT_CLEANUP: if float(self.windStopChan.read()) >= 0.0: if float(self.altStopChan.read()) >= 0.0: if float(self.accelChan.read()) >= 0.1: if float(self.velChan.read()) >= 2.0: self.state = TelSimStates.OFF return return","title":"State: AWAIT_CLEANUP"},{"location":"#color-changing","text":"","title":"Color changing"},{"location":"#edittextchanged-and-editfinished","text":"These functions are responsible for changing the background color to red while the user is inputting a value, and changing it back once they're finished. # ------------------------------------------------------- def editTextChanged(self, edit): '''Qt signal that something was typed in the edit field''' edit.changed = True edit.setStyleSheet('background-color: red') # -------------------------------------------------------- def editFinished(self, edit): '''Qt signal that the edit field lost focus when editing, revert the value''' if edit.changed: edit.setText(edit.undoText) edit.changed = False edit.setStyleSheet(self.editStyleSheet)","title":"editTextChanged and editFinished"},{"location":"#blocking-signals","text":"These functions use the attribute 'changed' (that was created in the Setup UI section) to prevent changing the color to red if it's receiving signals from the emulator. That way, it'll only change to red if the user is inputting changes. ef posBoxSetText(self, val): if not self.posBox.changed: self.posBox.setStyleSheet(\"\") self.posBox.blockSignals(True) # Turn off signals to the edit, a human is not editing it! self.posBox.setText(f\"{val:0.2f}\") self.posBox.blockSignals(False) # Turn on signals to the edit, a human is not editing it! def velBoxSetText(self, val): if not self.velBox.changed: self.velBox.setStyleSheet(\"\") self.velBox.blockSignals(True) # Turn off signals to the edit, a human is not editing it! self.velBox.setText(f\"{val:0.2f}\") self.velBox.blockSignals(False) # Turn on signals to the edit, a human is not editing it! def accelBoxSetText(self, val): if not self.accelBox.changed: self.accelBox.setStyleSheet(\"\") self.accelBox.blockSignals(True) # Turn off signals to the edit, a human is not editing it! self.accelBox.setText(f\"{val:0.2f}\") self.accelBox.blockSignals(False) # Turn on signals to the edit, a human is not editing it! def altBoxSetText(self, val): if not self.altBox.changed: self.altBox.setStyleSheet(\"\") self.altBox.blockSignals(True) # Turn off signals to the edit, a human is not editing it! self.altBox.setText(f\"{val:0.1f}\") self.altBox.blockSignals(False) # Turn on signals to the edit, a human is not editing it!","title":"Blocking signals"},{"location":"#input-verification-and-writing","text":"","title":"Input Verification and Writing"},{"location":"#validators","text":"These functions make sure that the value entered in the field is within bounds. If the user is finished editing (clicks away), then the showDialog function is used to give an error message. # --- Corrects pos/vel/accel/alt values after edited? -------------------- def posCheck(self, msg): ''' Makes sure the value entered in the field is within bounds. If not, will show error message. Also assigns self.finalPos used later for calculating time it will take to move :param msg: Value entered in posBox text box :return: ''' self.posBox.validator = QDoubleValidator(-40.00, 40.00, 2, notation=QDoubleValidator.StandardNotation) if QDoubleValidator.validate(self.posBox.validator, str(msg), 0)[0] != 2: self.posBox.setText(f\"{float(self.posChan.read()):0.2f}\") showDialog(\"Position must be a float between -40.00 and 40.00\") # else: # self.finalPos = msg def velCheck(self, msg): self.velBox.validator = QDoubleValidator(2.00, 80.00, 2, notation=QDoubleValidator.StandardNotation) if QDoubleValidator.validate(self.velBox.validator, str(msg), 0)[0] != 2: self.velBox.setText(f\"{float(self.velChan.read()):0.2f}\") showDialog(\"Velocity must be a float between 2.00 and 80.00\") else: self.velVal = msg def accelCheck(self, msg): self.accelBox.validator = QDoubleValidator(0.00, 10.00, 2, notation=QDoubleValidator.StandardNotation) if QDoubleValidator.validate(self.accelBox.validator, str(msg), 0)[0] != 2: self.accelBox.setText(f\"{float(self.accelChan.read()):0.2f}\") showDialog(\"Acceleration must be a float between 0.00 and 10.00\") def gainCheck(self, msg): if msg != '': # DELETE THIS LINE ONCE ACTUALLY CONNECTED self.gainInput.validator = QIntValidator(1, 600, self) if QIntValidator.validate(self.gainInput.validator, str(msg), 0)[0] != 2: self.gainInput.setText(\"1\") showDialog(\"Gain must be an integer between 1 and 600; automatically reset gain to 1\") def altCheck(self, msg): if msg != '': # DELETE THIS LINE ONCE ACTUALLY CONNECTED self.altBox.validator = QDoubleValidator(5.0, 12.0, 1, notation=QDoubleValidator.StandardNotation) if QDoubleValidator.validate(self.altBox.validator, str(msg), 0)[0] != 2: self.altBox.setText(f\"{float(self.altChan.read()):0.1f}\") showDialog(\"Altitude must be between 5.0 and 12.0; automatically reset altitude to 5.0\") # else: # self.finalAlt = msg def frameRateCheck(self, msg): if msg != '': # DELETE THIS LINE ONCE ACTUALLY CONNECTED if self.unbin.isChecked() == True: self.frameRateInput.validator = QIntValidator(1, UNBINNED_MODE, self) else: self.frameRateInput.validator = QIntValidator(1, BINNED_MODE, self) if QIntValidator.validate(self.frameRateInput.validator, str(msg), 0)[0] != 2: self.frameRateInput.setText(\"1\") showDialog(\"Frame rate must be integer between 1-2000 when in unbinned mode and \" \"1-3600 when in binned mode; automatically reset frame to 1\")","title":"Validators"},{"location":"#writing-to-channel","text":"These functions write the value passed through to the appropriate channel. The wait=False in the position and altitude writing channels are necessary to allow the user to stop the motion while the stages are moving to their destination. # ---- Writes the pos/vel/accel/alt to the emulator -------------------------------------------- def posWrite(self, msg): ''' Writes the value to the writing channel :param msg: Position value ''' f = float(msg) self.posWritingChan.write(f, wait=False) def velWrite(self, msg): f = float(msg) self.velChan.write(f) def accelWrite(self, msg): f = float(msg) self.accelChan.write(f) def altWrite(self, msg): f = float(msg) self.altWritingChan.write(f, wait=False)","title":"Writing to channel"},{"location":"#main-function","text":"if __name__ == '__main__': # ------------------------------------------------------------------------- # Commandline arguments parser = argparse.ArgumentParser(description='Turbulence Simulator GUI') parser.add_argument('-d', '--debug', help='Enable debugging output', action='store_true') args = parser.parse_args() # Get the debug argument first, as it drives our logging choices if args.debug: debug = True # ------------------------------------------------------------------------- # Set up the base logger all threads will use, once we know the debug flag coloredlogs.DEFAULT_LOG_FORMAT = '%(asctime)s [%(levelname)s] %(message)s' coloredlogs.DEFAULT_DATE_FORMAT = '%Y-%m-%d %H:%M:%S.%f' if debug: coloredlogs.install(level='DEBUG') else: coloredlogs.install(level='INFO') log = logging.getLogger('') # Disable the debug logging from Qt logging.getLogger('PyQt5').setLevel(logging.WARNING) application = QtWidgets.QApplication(sys.argv) mainwin = TurbulenceSimulatorGUIMain() mainwin.setupUI() # mainwin.setMinimumSize(0, 0) # mainwin.resize(10,10) mainwin.show() # Run the Qt application status = kPyQt.run(application) sys.exit(status)","title":"Main function"},{"location":"about/","text":"About KAPA Telescope Simulator The Keck All-sky Precision Adaptive-optics (KAPA) project will be a next-generation tomographic laser AO system, projected to begin operation at the W.M. Keck Observatory in 2024. To test their AO algorithm, Keck has built a Telescope Simulator that simulates the KAPA system on a smaller scale and more controlled environment. The KAPA Telescope Simulator is being further modified to include a turbulence simulator, which includes a glass phase screen, to simulate typical atmospheric turbulence at various altitudes and wind speeds. This simulator must move extremely precisely in two-dimensions, and will do so via two precision translation stages. GUI The turbulence simulator requires control from a GUI that adjusts different parameters necessary for the AO simulator\u2019s function. This GUI will also control some AO parameters, such as the wavefront sensor\u2019s gain, and frame rate, as well as have the ability to invoke other AO operational GUIs. The ultimate goal of this project was to create an intuitive GUI that could be used by astronomers and engineers alike. Here is a list of blah blah connection gain timer this is a hyperlink example and a bold example .","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#kapa-telescope-simulator","text":"The Keck All-sky Precision Adaptive-optics (KAPA) project will be a next-generation tomographic laser AO system, projected to begin operation at the W.M. Keck Observatory in 2024. To test their AO algorithm, Keck has built a Telescope Simulator that simulates the KAPA system on a smaller scale and more controlled environment. The KAPA Telescope Simulator is being further modified to include a turbulence simulator, which includes a glass phase screen, to simulate typical atmospheric turbulence at various altitudes and wind speeds. This simulator must move extremely precisely in two-dimensions, and will do so via two precision translation stages.","title":"KAPA Telescope Simulator"},{"location":"about/#gui","text":"The turbulence simulator requires control from a GUI that adjusts different parameters necessary for the AO simulator\u2019s function. This GUI will also control some AO parameters, such as the wavefront sensor\u2019s gain, and frame rate, as well as have the ability to invoke other AO operational GUIs. The ultimate goal of this project was to create an intuitive GUI that could be used by astronomers and engineers alike. Here is a list of blah blah connection gain timer this is a hyperlink example and a bold example .","title":"GUI"}]}